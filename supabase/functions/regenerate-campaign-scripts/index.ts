import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface ScriptRequest {
  scriptType: 'call' | 'sms' | 'followup';
  targetAudience: string;
  campaignAngle: string;
  customRequirements?: string;
}

const getScriptPrompt = (request: ScriptRequest): string => {
  const basePrompts = {
    call: `Create a professional cold calling script for financial consultants targeting ${request.targetAudience}. The script should be conversational, build rapport, and focus on ${request.campaignAngle}. Include opening, value proposition, objection handling, and closing. Keep it under 2 minutes when spoken.`,
    
    sms: `Create a compelling SMS message for financial consultants reaching out to ${request.targetAudience}. Focus on ${request.campaignAngle}. Keep it under 160 characters, professional yet friendly, with a clear call-to-action.`,
    
    followup: `Create a follow-up email template for financial consultants to send after initial contact with ${request.targetAudience}. Focus on ${request.campaignAngle}. Include value-add content, next steps, and maintain professional relationship building tone.`
  };

  let prompt = basePrompts[request.scriptType];
  
  if (request.customRequirements) {
    prompt += `\n\nAdditional requirements: ${request.customRequirements}`;
  }

  prompt += `\n\nIMPORTANT: Return only the script content without any explanatory text, headers, or formatting markers. For Singapore financial consultants, ensure compliance with MAS regulations.`;

  return prompt;
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    if (!openAIApiKey) {
      throw new Error('OpenAI API key not configured');
    }

    const request: ScriptRequest = await req.json();
    
    if (!request.scriptType || !request.targetAudience || !request.campaignAngle) {
      throw new Error('Missing required parameters');
    }

    console.log(`Regenerating ${request.scriptType} script for ${request.targetAudience}`);

    const prompt = getScriptPrompt(request);

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: 'You are an expert financial marketing copywriter specializing in lead generation scripts for Singapore financial consultants. Create compelling, compliant, and effective scripts.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.7,
        max_tokens: 1000,
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(`OpenAI API error: ${errorData.error?.message || 'Unknown error'}`);
    }

    const data = await response.json();
    const script = data.choices[0]?.message?.content;

    if (!script) {
      throw new Error('No script generated by AI');
    }

    console.log(`Successfully generated ${request.scriptType} script`);

    return new Response(JSON.stringify({ script: script.trim() }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
    
  } catch (error) {
    console.error('Error in regenerate-campaign-scripts function:', error);
    return new Response(
      JSON.stringify({ 
        error: error.message || 'Failed to regenerate script' 
      }), 
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});